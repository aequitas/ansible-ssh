#!/usr/bin/env python
#
# This script is an inventory-aware ssh wrapper that eliminates the need
# to repeat information from the inventory in .ssh/config.

from __future__ import print_function

import os
import sys

from ansible.cli import CLI
from ansible.inventory import Inventory
from ansible.parsing.dataloader import DataLoader
from ansible.vars import VariableManager


def main(argv):
    # We require at least one host pattern on the command line (but we
    # may accept other options in future).

    # Basic Ansible initialisation
    loader = DataLoader()
    variable_manager = VariableManager()
    parser = CLI.base_parser(
        usage='%prog <host-pattern>',
        runtask_opts=True,
    )
    parser.add_option("-l", dest="login_name", help="login_name")
    parser.add_option("-r", dest="retry", help="Retry until connected.")
    options, args = parser.parse_args()
    if len(args) == 1:
        pattern =  args[0]
    else:
        pattern = ''

    # Load the inventory and find hosts matching the specified pattern.
    if hasattr(options, 'inventory'):
        inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list=options.inventory)
    else:
        inventory = Inventory(loader=loader, variable_manager=variable_manager)

    variable_manager.set_inventory(inventory)
    hosts = inventory.list_hosts(pattern)

    if not hosts:
        hosts = inventory.list_hosts('*' + pattern + '*')

    if not hosts:
        print("No hosts found!")
        sys.exit(1)

    # We can't ssh to more than one matching host.
    if len(hosts) != 1:
        print("Your host pattern matched %d hosts" % len(hosts))
        for i, host in enumerate(hosts):
            print("{:>4}".format(i+1), host, host.groups)
        number = raw_input("Host to connect to (default: random): ")
        try:
            number = int(number)-1
        except ValueError:
            number = 0
            print("Selected host: ", hosts[number])
        host = hosts[number]
    else:
        host = hosts[0]

    # Build ssh arguments for this host
    ssh_args = ['ssh']

    if ('ansible_ssh_private_key_file' in host.vars
        and host.vars['ansible_ssh_private_key_file'] is not None):
        ssh_args += ("-o", "IdentityFile=\"{0}\"".format(os.path.expanduser(host.vars['ansible_ssh_private_key_file'])))

    if ('ansible_ssh_port' in host.vars
        and host.vars['ansible_ssh_port'] is not None):
        ssh_args += ("-o", "Port={0}".format(host.vars['ansible_ssh_port']))

    if options.login_name:
        ssh_args += ("-o", "User={0}".format(options.login_name))
    elif ('ansible_ssh_user' in host.vars
        and host.vars['ansible_ssh_user'] is not None):
        ssh_args += ("-o", "User={0}".format(host.vars['ansible_ssh_user']))

    ssh_host = host.vars.get('ansible_ssh_host')

    if ssh_host:
        ssh_args.append(ssh_host)
    else:
        ssh_args.append(str(host))
    print(" ".join(ssh_args))
    # Launch ssh
    print(os.execl('/usr/bin/ssh', *ssh_args))

if __name__=='__main__':
    main(sys.argv)
